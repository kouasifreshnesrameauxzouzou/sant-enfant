import streamlit as st
import pandas as pd
import numpy as np
import pickle
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from sklearn.preprocessing import LabelEncoder, StandardScaler
import io
import os

# Titre et description de l'application
st.set_page_config(
    page_title="D√©tection Pr√©coce des Retards de D√©veloppement",
    page_icon="üë∂",
    layout="wide"
)

# Fonction pour charger le mod√®le et les pr√©processeurs
@st.cache_resource
def load_resources():
    # Si le mod√®le n'existe pas encore, nous pouvons le cr√©er ici
    if not os.path.exists('model.joblib'):
        st.warning("Le mod√®le n'a pas √©t√© trouv√©. Veuillez d'abord l'entra√Æner et le sauvegarder.")
        return None, None, None
    
    model = joblib.load('model.joblib')
    
    # Chargement des pr√©processeurs si disponibles
    scaler = None
    label_encoders = {}
    
    if os.path.exists('scaler.joblib'):
        scaler = joblib.load('scaler.joblib')
    
    if os.path.exists('label_encoders.joblib'):
        label_encoders = joblib.load('label_encoders.joblib')
    
    return model, scaler, label_encoders

# Charger les ressources
try:
    model, scaler, label_encoders = load_resources()
    models_loaded = model is not None
except Exception as e:
    st.error(f"Erreur lors du chargement des mod√®les: {e}")
    models_loaded = False

# Fonction pour pr√©traiter les donn√©es d'entr√©e
def preprocess_input(input_data, scaler, label_encoders):
    """
    Pr√©traite les donn√©es d'entr√©e de la m√™me mani√®re que lors de l'entra√Ænement.
    
    Args:
        input_data: DataFrame avec les donn√©es saisies par l'utilisateur
        scaler: Le scaler utilis√© pour normaliser les donn√©es num√©riques
        label_encoders: Dictionnaire des encodeurs pour les variables cat√©gorielles
        
    Returns:
        DataFrame pr√©trait√© pr√™t pour la pr√©diction
    """
    # Cr√©er un DataFrame vide avec toutes les colonnes attendues par le mod√®le
    expected_columns = ['sexe', 'niveau_education_mere', 'revenu_mensuel_famille', 'poids_kg', 
                        'taille_cm', 'indice_IMC', 'age_marche_mois', 'age_parole_mois', 
                        'age_sassoir_mois', 'score_cognitif', 'score_moteur']
    
    processed_data = pd.DataFrame(columns=expected_columns)
    
    # Mapping entre les champs du formulaire et les colonnes attendues
    processed_data['sexe'] = [input_data['sexe'][0]]  # Supposons que vous avez ajout√© cette entr√©e
    processed_data['niveau_education_mere'] = [input_data['niveau_education_mere'][0]]  # Idem
    processed_data['revenu_mensuel_famille'] = [input_data['revenu_mensuel_famille'][0]]
    processed_data['poids_kg'] = [input_data['weight'][0]]
    processed_data['taille_cm'] = [input_data['height'][0]]
    processed_data['indice_IMC'] = [input_data['weight'][0] / ((input_data['height'][0]/100) ** 2)]
    processed_data['age_marche_mois'] = [input_data.get('age_marche_mois', [12])[0]]
    processed_data['age_parole_mois'] = [input_data.get('age_parole_mois', [12])[0]]
    processed_data['age_sassoir_mois'] = [input_data.get('age_sassoir_mois', [6])[0]]
    processed_data['score_cognitif'] = [input_data['language_skills'][0]]
    processed_data['score_moteur'] = [input_data['motor_skills'][0]]
    
    # Appliquer le LabelEncoder aux variables cat√©gorielles
    if label_encoders:
        for col, le in label_encoders.items():
            if col in processed_data.columns:
                processed_data[col] = le.transform(processed_data[col])
    
    # Appliquer le StandardScaler aux variables num√©riques
    if scaler:
        numerical_cols = ["revenu_mensuel_famille", "poids_kg", "taille_cm", "indice_IMC", 
                           "age_marche_mois", "age_parole_mois", "age_sassoir_mois", 
                           "score_cognitif", "score_moteur"]
        processed_data[numerical_cols] = scaler.transform(processed_data[numerical_cols])
    
    return processed_data

# Fonction pour pr√©dire les retards de d√©veloppement
def predict_delay(model, input_data, scaler, label_encoders):
    """
    Fonction pour pr√©dire les retards de d√©veloppement.
    
    Args:
        model: Le mod√®le charg√© pour faire des pr√©dictions
        input_data: DataFrame contenant les donn√©es d'entr√©e
        scaler: Le scaler utilis√© pour normaliser les donn√©es
        label_encoders: Les encodeurs pour les variables cat√©gorielles
        
    Returns:
        Tuple contenant (classes pr√©dites, probabilit√©s)
    """
    # Pr√©traiter les donn√©es
    processed_data = preprocess_input(input_data, scaler, label_encoders)
    
    # Assurer que les colonnes correspondent √† celles utilis√©es lors de l'entra√Ænement
    processed_data = processed_data.reindex(columns=model.feature_names_in_, fill_value=0)

    # Faire la pr√©diction
    prediction_classes = model.predict(processed_data)
    prediction_probabilities = model.predict_proba(processed_data)
    
    return prediction_classes, prediction_probabilities


def generate_recommendations(age_mois, prediction, scores):
    """
    G√©n√®re des recommandations personnalis√©es bas√©es sur l'√¢ge, la pr√©diction et les scores.
    
    Args:
        age_mois: √Çge de l'enfant en mois
        prediction: La pr√©diction du mod√®le (0=pas de retard, 1=retard)
        scores: Dictionnaire contenant les scores pour diff√©rentes comp√©tences
        
    Returns:
        Dictionnaire de recommandations par cat√©gorie
    """
    recommendations = {
        'g√©n√©ral': [],
        'motricit√©': [],
        'langage': [],
        'social': [],
        'nutrition': [],
        'environnement': []
    }
    
    # Recommandations g√©n√©rales bas√©es sur le niveau de risque
    if prediction == 0:
        recommendations['g√©n√©ral'].append("Continuez √† suivre le d√©veloppement normal de votre enfant.")
        recommendations['g√©n√©ral'].append("Consultez votre p√©diatre pour les visites de routine recommand√©es.")
    else:  # prediction == 1
        recommendations['g√©n√©ral'].append("Une √©valuation professionnelle est recommand√©e pour d√©terminer si une intervention pr√©coce est n√©cessaire.")
        recommendations['g√©n√©ral'].append("Contactez votre p√©diatre pour discuter des options d'intervention disponibles.")
    
    # Recommandations g√©n√©rales bas√©es sur le niveau de risque
    if prediction == 0:
        recommendations['g√©n√©ral'].append("Continuez √† suivre le d√©veloppement normal de votre enfant.")
        recommendations['g√©n√©ral'].append("Consultez votre p√©diatre pour les visites de routine recommand√©es.")
    else:  # prediction == 1
        recommendations['g√©n√©ral'].append("Une √©valuation professionnelle est recommand√©e pour d√©terminer si une intervention pr√©coce est n√©cessaire.")
        recommendations['g√©n√©ral'].append("Contactez votre p√©diatre pour discuter des options d'intervention disponibles.")
    
    # Recommandations sp√©cifiques bas√©es sur les scores
    # Motricit√©
    if scores['score_moteur'] < 0.4:
        recommendations['motricit√©'].append("Encouragez les activit√©s physiques adapt√©es √† l'√¢ge de votre enfant.")
        recommendations['motricit√©'].append("Cr√©ez un espace s√ªr pour explorer et pratiquer de nouvelles comp√©tences motrices.")
        if age_mois < 12:
            recommendations['motricit√©'].append("Pratiquez le temps sur le ventre pour renforcer les muscles du cou et du dos.")
        elif age_mois < 24:
            recommendations['motricit√©'].append("Encouragez la marche et l'exploration avec un soutien appropri√©.")
        else:
            recommendations['motricit√©'].append("Int√©grez des jeux qui d√©veloppent l'√©quilibre et la coordination.")
    
    # Langage
    if scores['score_cognitif'] < 0.4:
        recommendations['langage'].append("Parlez r√©guli√®rement √† votre enfant en utilisant un langage clair et simple.")
        recommendations['langage'].append("Lisez des livres adapt√©s √† son √¢ge quotidiennement.")
        if age_mois < 12:
            recommendations['langage'].append("R√©pondez aux babillages et aux vocalisations de votre enfant.")
        elif age_mois < 24:
            recommendations['langage'].append("Nommez les objets et les actions dans son environnement quotidien.")
        else:
            recommendations['langage'].append("Posez des questions ouvertes et donnez-lui le temps de r√©pondre.")
    
    # Social
    if scores.get('social_skills', 0) < 0.4:
        recommendations['social'].append("Cr√©ez des opportunit√©s d'interaction avec d'autres enfants.")
        recommendations['social'].append("Jouez √† des jeux interactifs appropri√©s √† son √¢ge.")
        if age_mois > 18:
            recommendations['social'].append("Encouragez les jeux de r√¥le et le partage.")
    
    # Nutrition
    if 'nutrition_score' in scores and scores['nutrition_score'] < 0.6:
        recommendations['nutrition'].append("Assurez-vous d'offrir une alimentation vari√©e et √©quilibr√©e.")
        recommendations['nutrition'].append("Consultez un p√©diatre ou un nutritionniste pour des conseils alimentaires adapt√©s.")
        if age_mois < 12:
            recommendations['nutrition'].append("Suivez les recommandations concernant l'introduction des aliments solides.")
        else:
            recommendations['nutrition'].append("Limitez les aliments transform√©s et riches en sucre.")
    
    # Environnement
    if 'environment_quality' in scores and scores['environment_quality'] < 0.6:
        recommendations['environnement'].append("Cr√©ez un environnement stimulant avec des jouets adapt√©s √† son √¢ge.")
        recommendations['environnement'].append("√âtablissez des routines r√©guli√®res pour le sommeil, les repas et le jeu.")
        recommendations['environnement'].append("R√©duisez l'exposition aux √©crans selon les recommandations pour son √¢ge.")
    
    return recommendations

# Sidebar pour la navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Aller √†", ["Accueil", "√âvaluation", "Suivi", "√Ä propos"])

# Page d'accueil
if page == "Accueil":
    st.title("Syst√®me de D√©tection Pr√©coce des Retards de D√©veloppement")
    
    # Utiliser une image statique pour l'exemple ou un placeholder
    try:
        st.image("baby_image.jpg", width=600)
    except:
        st.image("mere_enfant.jpg", width=600)
    
    st.markdown("""
    ## Bienvenue dans notre application de d√©tection pr√©coce des retards de d√©veloppement
    
    Cette application utilise l'intelligence artificielle pour aider les parents et les professionnels de sant√© √† :
    
    * D√©tecter pr√©cocement les signes potentiels de retard de d√©veloppement
    * Suivre la progression du d√©veloppement de l'enfant
    * Recevoir des recommandations personnalis√©es
    
    ### Comment utiliser cette application ?
    
    1. Allez √† la page **√âvaluation** pour √©valuer le d√©veloppement actuel de votre enfant
    2. Utilisez la page **Suivi** pour enregistrer et suivre les progr√®s dans le temps
    
    > **Note importante** : Cette application est un outil d'aide et ne remplace pas l'avis d'un professionnel de sant√©.
    """)
    
    st.info("Pour commencer, s√©lectionnez '√âvaluation' dans le menu de gauche.")

# Page d'√©valuation
elif page == "√âvaluation":
    st.title("√âvaluation du D√©veloppement")
    
    st.write("Veuillez remplir les informations suivantes pour √©valuer le d√©veloppement de votre enfant.")
    
    # Formulaire d'√©valuation
    with st.form("evaluation_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("Nom de l'enfant (optionnel)")
            sexe = st.selectbox("Sexe", [("M", 0), ("F", 1)], format_func=lambda x: x[0])[0]
            age_months = st.number_input("√Çge en mois", min_value=1, max_value=60, value=12)
            weight = st.number_input("Poids (kg)", min_value=0.5, max_value=30.0, value=9.0, step=0.1)
            height = st.number_input("Taille (cm)", min_value=30.0, max_value=120.0, value=75.0, step=0.5)
            age_marche_mois = st.number_input("√Çge de la marche (mois)", min_value=0, max_value=36, value=12)
            age_parole_mois = st.number_input("√Çge des premiers mots (mois)", min_value=0, max_value=36, value=12)
            age_sassoir_mois = st.number_input("√Çge pour s'asseoir (mois)", min_value=0, max_value=36, value=6)
        
        with col2:
            niveau_education_mere = st.selectbox("Niveau d'√©ducation de la m√®re", 
                                              [("Primaire", 0), ("Secondaire", 1), ("Sup√©rieur", 2)], 
                                              format_func=lambda x: x[0])[0]
            revenu_mensuel_famille = st.number_input("Revenu mensuel de la famille", min_value=0, value=2000)
            motor_skills = st.slider("Score moteur (0-1)", 0.0, 1.0, 0.5, 0.01, 
                                   help="√âvaluez la capacit√© de l'enfant √† se d√©placer, s'asseoir, saisir des objets, etc.")
            language_skills = st.slider("Score cognitif (0-1)", 0.0, 1.0, 0.5, 0.01,
                                      help="√âvaluez la capacit√© de l'enfant √† comprendre, √† s'exprimer, √† utiliser des mots, etc.")
            social_skills = st.slider("Comp√©tences sociales (0-1)", 0.0, 1.0, 0.5, 0.01,
                                    help="√âvaluez la capacit√© de l'enfant √† interagir, √† r√©pondre aux sourires, √† jouer avec d'autres, etc.")
                                    
        
        st.write("Informations sur l'environnement et la nutrition:")
        col3, col4 = st.columns(2)
        
        with col3:
            nutrition_score = st.slider("Score de nutrition (0-1)", 0.0, 1.0, 0.7, 0.01,
                                      help="√âvaluez la qualit√© et la vari√©t√© de l'alimentation de l'enfant")
        
        with col4:
            environment_quality = st.slider("Qualit√© de l'environnement (0-1)", 0.0, 1.0, 0.7, 0.01,
                                         help="√âvaluez la qualit√© de l'environnement de l'enfant: stimulation, s√©curit√©, etc.")
        
        submit_button = st.form_submit_button("√âvaluer")
    
    # Lorsque le formulaire est soumis
    if submit_button and models_loaded:
        # Pr√©parer les donn√©es pour la pr√©diction
        input_data = pd.DataFrame({
            'sexe': [sexe],
            'niveau_education_mere': [niveau_education_mere],
            'revenu_mensuel_famille': [revenu_mensuel_famille],
            'weight': [weight],
            'height': [height],
            'age_marche_mois': [age_marche_mois],
            'age_parole_mois': [age_parole_mois],
            'age_sassoir_mois': [age_sassoir_mois],
            'motor_skills': [motor_skills],
            'language_skills': [language_skills]
        })
        
        # Faire la pr√©diction
        prediction_class, prediction_prob = predict_delay(model, input_data, scaler, label_encoders)
        prediction = prediction_class[0]
        probabilities = prediction_prob[0]
        
        # Cr√©er un dictionnaire avec les scores pour les recommandations
        scores = {
            'score_moteur': motor_skills,
            'score_cognitif': language_skills,
            'social_skills': social_skills,
            'nutrition_score': nutrition_score,
            'environment_quality': environment_quality
        }
        
        # G√©n√©rer des recommandations
        recommendations = generate_recommendations(age_months, prediction, scores)
        
        # Afficher les r√©sultats
        st.header("R√©sultats de l'√©valuation")
        
        # Afficher le niveau de risque
        risk_levels = ["Pas de retard d√©tect√©", "Retard possible"]
        risk_colors = ["green", "red"]
        
        st.markdown(f"### Niveau de risque : <span style='color:{risk_colors[prediction]}'>{risk_levels[prediction]}</span>", unsafe_allow_html=True)
        
        # Afficher les probabilit√©s
        st.subheader("D√©tails de l'√©valuation")
        fig, ax = plt.subplots(figsize=(10, 5))
        bars = ax.bar(risk_levels, probabilities * 100, color=['green', 'red'])
        ax.set_ylabel('Probabilit√© (%)')
        ax.set_title('Probabilit√© pour chaque niveau de risque')
        
        # Ajouter les valeurs sur les barres
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{height:.1f}%', ha='center', va='bottom')
        
        st.pyplot(fig)
        
        # Afficher les recommandations
        st.header("Recommandations personnalis√©es")
        
        for category, recs in recommendations.items():
            if recs:
                if category == 'g√©n√©ral':
                    expander = st.expander("üìã Recommandations g√©n√©rales", expanded=True)
                elif category == 'motricit√©':
                    expander = st.expander("üèÉ Motricit√©", expanded=True)
                elif category == 'langage':
                    expander = st.expander("üó£Ô∏è Langage", expanded=True)
                elif category == 'social':
                    expander = st.expander("üë• Comp√©tences sociales", expanded=True)
                elif category == 'nutrition':
                    expander = st.expander("üçé Nutrition", expanded=True)
                elif category == 'environnement':
                    expander = st.expander("üè† Environnement", expanded=True)
                
                with expander:
                    for rec in recs:
                        st.write(f"- {rec}")
        
        # Enregistrer les r√©sultats dans la session
        if 'history' not in st.session_state:
            st.session_state.history = []
        
        # Ajouter l'√©valuation actuelle √† l'historique
        st.session_state.history.append({
            'date': pd.Timestamp.now().strftime("%Y-%m-%d %H:%M"),
            'name': name if name else "Enfant",
            'age_months': age_months,
            'prediction': prediction,
            'scores': scores
        })
        
        st.success("√âvaluation compl√©t√©e et sauvegard√©e dans l'historique.")

# Page de suivi
elif page == "Suivi":
    st.title("Suivi du D√©veloppement")
    
    if 'history' not in st.session_state or len(st.session_state.history) == 0:
        st.info("Aucune √©valuation enregistr√©e. Veuillez d'abord effectuer une √©valuation.")
    else:
        st.write("Historique des √©valuations:")
        
        # Cr√©er un DataFrame √† partir de l'historique
        history_df = pd.DataFrame(st.session_state.history)
        
        # Afficher le tableau d'historique
        st.dataframe(history_df[['date', 'name', 'age_months', 'prediction']])
        
        # Si plusieurs √©valuations sont disponibles, cr√©er un graphique d'√©volution
        if len(st.session_state.history) > 1:
            st.subheader("√âvolution dans le temps")
            
            fig, ax = plt.subplots(figsize=(10, 6))
            for score_name in ['score_moteur', 'score_cognitif', 'social_skills', 'nutrition_score', 'environment_quality']:
                scores = [entry['scores'].get(score_name, 0) for entry in st.session_state.history]
                dates = [entry['date'] for entry in st.session_state.history]
                ax.plot(dates, scores, marker='o', linestyle='-', label=score_name)
            
            ax.set_ylabel('Score (0-1)')
            ax.set_title('√âvolution des scores au fil du temps')
            ax.legend()
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            st.pyplot(fig)

# Page √Ä propos
elif page == "√Ä propos":
    st.title("√Ä propos de cette application")
    
    st.markdown("""
    ## Syst√®me de D√©tection Pr√©coce des Retards de D√©veloppement
    
    Cette application a √©t√© con√ßue pour aider √† la d√©tection pr√©coce des retards de d√©veloppement chez les enfants de 0 √† 5 ans.
    
    ### Comment √ßa marche ?
    
    L'application utilise un mod√®le d'apprentissage automatique entra√Æn√© sur des donn√©es de d√©veloppement infantile pour √©valuer le risque de retard de d√©veloppement. Le mod√®le analyse plusieurs facteurs, notamment:
    
    * Les comp√©tences motrices
    * Les comp√©tences cognitives et langagi√®res
    * L'environnement social
    * La nutrition et la croissance physique
    
    ### Avertissement
    
    Cette application est un outil d'aide √† la d√©cision et ne remplace en aucun cas l'avis d'un professionnel de sant√©. Si vous avez des inqui√©tudes concernant le d√©veloppement de votre enfant, veuillez consulter un p√©diatre ou un sp√©cialiste du d√©veloppement infantile.
    """)
    
    st.info("D√©velopp√© dans le cadre d'un projet √©ducatif.")